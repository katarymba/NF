from datetime import datetime

"""add client details columns to orders table

Revision ID: 1920e96d1a45
Revises: 0cd254bdeb3a
Create Date: 2025-05-08 23:25:17.458377

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy import text
from sqlalchemy.dialects import postgresql
from sqlalchemy.dialects.postgresql import JSONB

# revision identifiers, used by Alembic.
revision: str = '1920e96d1a45'
down_revision: Union[str, None] = '0cd254bdeb3a'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('administrators', 'full_name',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
    op.create_foreign_key(None, 'cart_items', 'products', ['product_id'], ['id'])
    op.drop_constraint('categories_parent_category_id_fkey', 'categories', type_='foreignkey')
    op.create_foreign_key(None, 'order_items', 'products', ['product_id'], ['id'])

    # Изменения для таблицы orders
    op.add_column('orders', sa.Column('client_name', sa.String(length=255), nullable=True))
    op.add_column('orders', sa.Column('delivery_address', sa.Text(), nullable=True))
    op.add_column('orders', sa.Column('payment_method', sa.String(length=50), nullable=True))
    op.add_column('orders', sa.Column('order_items', JSONB, nullable=True))  # Изменено на JSONB вместо JSON
    op.add_column('orders', sa.Column('contact_phone', sa.String(length=50), nullable=True))

    # Остальные изменения для таблицы orders
    op.alter_column('orders', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    op.create_foreign_key(None, 'price_history', 'products', ['product_id'], ['id'])
    op.create_index(op.f('ix_products_id'), 'products', ['id'], unique=False)
    op.alter_column('shipments', 'shipping_address',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)

    # Используем текущий алембик-коннектор для выполнения SQL
    conn = op.get_bind()

    # Проверяем существование типа ENUM перед его созданием
    has_type = False
    try:
        result = conn.execute(text("SELECT 1 FROM pg_type WHERE typname = 'movementtype'"))
        has_type = result.scalar() is not None
    except Exception:
        pass

    if not has_type:
        # Создаем тип ENUM только если он не существует
        op.execute(text("CREATE TYPE movementtype AS ENUM ('INCOMING', 'OUTGOING', 'TRANSFER')"))

    # Проверяем текущий тип столбца
    try:
        result = conn.execute(text("SELECT data_type FROM information_schema.columns WHERE table_name = 'stock_movements' AND column_name = 'movement_type'"))
        column_type = result.scalar()

        if column_type and column_type.lower() != 'user-defined':
            # Изменяем тип столбца только если он еще не изменен
            op.execute(text("ALTER TABLE stock_movements ALTER COLUMN movement_type TYPE movementtype USING movement_type::movementtype"))
    except Exception:
        # Если возникла ошибка, попробуем изменить тип без проверки
        try:
            op.execute(text("ALTER TABLE stock_movements ALTER COLUMN movement_type TYPE movementtype USING movement_type::movementtype"))
        except Exception:
            pass  # Игнорируем ошибку, если тип уже изменен

    op.create_foreign_key(None, 'stock_movements', 'products', ['product_id'], ['id'])
    op.create_foreign_key(None, 'stocks', 'products', ['product_id'], ['id'])
    op.create_index(op.f('ix_supplies_id'), 'supplies', ['id'], unique=False)
    op.create_index(op.f('ix_supply_items_id'), 'supply_items', ['id'], unique=False)
    op.alter_column('users', 'phone',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('users', 'birthday',
               existing_type=sa.DATE(),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.drop_index('ix_users_email', table_name='users')
    op.drop_index('ix_users_phone', table_name='users')
    op.drop_index('ix_users_username', table_name='users')
    op.create_unique_constraint(None, 'users', ['username'])
    op.create_unique_constraint(None, 'users', ['email'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'users', type_='unique')
    op.drop_constraint(None, 'users', type_='unique')
    op.create_index('ix_users_username', 'users', ['username'], unique=True)
    op.create_index('ix_users_phone', 'users', ['phone'], unique=True)
    op.create_index('ix_users_email', 'users', ['email'], unique=True)
    op.alter_column('users', 'birthday',
               existing_type=sa.DateTime(),
               type_=sa.DATE(),
               existing_nullable=True)
    op.alter_column('users', 'phone',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_index(op.f('ix_supply_items_id'), table_name='supply_items')
    op.drop_index(op.f('ix_supplies_id'), table_name='supplies')
    op.drop_constraint(None, 'stocks', type_='foreignkey')
    op.drop_constraint(None, 'stock_movements', type_='foreignkey')

    conn = op.get_bind()

    # Проверяем текущий тип столбца
    try:
        result = conn.execute(text("SELECT data_type FROM information_schema.columns WHERE table_name = 'stock_movements' AND column_name = 'movement_type'"))
        column_type = result.scalar()

        if column_type and column_type.lower() == 'user-defined':
            # Изменение типа обратно на VARCHAR только если столбец имеет тип ENUM
            op.execute(text("ALTER TABLE stock_movements ALTER COLUMN movement_type TYPE VARCHAR(50) USING movement_type::text"))
    except Exception:
        pass

    # Проверяем существование типа перед удалением
    try:
        result = conn.execute(text("SELECT 1 FROM pg_type WHERE typname = 'movementtype'"))
        has_type = result.scalar() is not None

        if has_type:
            # Удаление пользовательского типа ENUM
            op.execute(text("DROP TYPE movementtype"))
    except Exception:
        pass

    op.alter_column('shipments', 'shipping_address',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    op.drop_index(op.f('ix_products_id'), table_name='products')
    op.drop_constraint(None, 'price_history', type_='foreignkey')

    op.alter_column('orders', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_column('orders', 'contact_phone')
    op.drop_column('orders', 'order_items')
    op.drop_column('orders', 'payment_method')
    op.drop_column('orders', 'delivery_address')
    op.drop_column('orders', 'client_name')
    op.drop_constraint(None, 'order_items', type_='foreignkey')
    op.create_foreign_key('categories_parent_category_id_fkey', 'categories', 'categories', ['parent_category_id'], ['id'])
    op.drop_constraint(None, 'cart_items', type_='foreignkey')
    op.alter_column('administrators', 'full_name',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
    # ### end Alembic commands ###