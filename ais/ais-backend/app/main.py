import os
import time
from datetime import datetime, timedelta
from fastapi import FastAPI, Request, HTTPException, Response, logger
from fastapi.middleware.cors import CORSMiddleware
from app.routers import auth, users, products, categories, orders, payments, shipments
from app.routers import integration
from app.routers import administrators
import httpx
from dotenv import load_dotenv

from app.models import Administrator
from app.database import SessionLocal
from app.routers.auth import get_password_hash


def create_default_admin():
    db = SessionLocal()
    try:
        admin = db.query(Administrator).filter(Administrator.username == "main_admin").first()
        if not admin:
            print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
            hashed_password = get_password_hash("qwerty123")
            new_admin = Administrator(
                username="main_admin",
                email="admin@example.com",
                password_hash=hashed_password,
                full_name="Main Administrator",
                role="admin",
                is_active=True
            )
            db.add(new_admin)
            db.commit()
            print("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–Ω!")
        else:
            print("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
    finally:
        db.close()


# –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
create_default_admin()

load_dotenv()

AIS_API = os.getenv("AIS_API", "http://localhost:8001")

app = FastAPI(
    title="AIS Backend API",
    description="–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è",
    version="1.0.0",
    docs_url="/docs",  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º URL –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    redoc_url="/redoc"  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º URL –¥–ª—è ReDoc
)

origins = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    "http://localhost:5174",
    "http://127.0.0.1:5174",
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://192.168.0.157:5173",
    "http://192.168.0.157:8000",
    "http://localhost:8000",
    "http://localhost:8001",
    "http://localhost:8080",
    "http://0.0.0.0:8001"  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å
    # –î–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –≤–∞—à–∏ production –¥–æ–º–µ–Ω—ã, –∫–æ–≥–¥–∞ –ø–µ—Ä–µ–π–¥–µ—Ç–µ –≤ production
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,  # –í–∞–∂–Ω–æ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∫—É–∫–∏
    allow_methods=["*"],     # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã
    allow_headers=["*"],     # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
)
print("‚úÖ CORS middleware –ø–æ–¥–∫–ª—é—á–µ–Ω!")

# —Ä–æ—É—Ç–µ—Ä—ã
app.include_router(auth.router, prefix="/auth", tags=["Authentication"])
app.include_router(users.router, prefix="/users", tags=["Users"])
app.include_router(administrators.router, prefix="/administrators", tags=["Administrators"])
app.include_router(products.router, prefix="/api/products", tags=["Products"])
app.include_router(categories.router, prefix="/api/categories", tags=["Categories"])
app.include_router(orders.router, prefix="/api/orders", tags=["Orders"])
app.include_router(payments.router, prefix="/api/payments", tags=["Payments"])
app.include_router(shipments.router, prefix="/shipments", tags=["Shipments"])
app.include_router(integration.router, prefix="/api/integration", tags=["Integration"])


@app.get("/")
def read_root():
    return {"message": "AIS Backend API is running."}


@app.get("/health")
def health_check():
    return {"status": "ok", "timestamp": str(datetime.now())}


@app.api_route("/ais/administrators/{path:path}", methods=["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"])
async def ais_admin_proxy(path: str, request: Request):
    """–ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AIS Administrators API"""
    return await proxy_request(f"{AIS_API}/administrators/{path}", request)


async def proxy_request(target_url: str, request: Request):
    """–ü—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É URL –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
    start_time = time.time()
    logger.info(f"–ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞: {request.method} {request.url.path} -> {target_url}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
        method = request.method

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        params = dict(request.query_params)

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–∏—Å–∫–ª—é—á–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ö–æ—Å—Ç–∞)
        headers = {k: v for k, v in request.headers.items()
                   if k.lower() not in ["host", "content-length"]}

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ POST, PUT, PATCH
        content = None
        if method in ["POST", "PUT", "PATCH"]:
            content = await request.body()

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Ü–µ–ª–µ–≤–æ–º—É API
        async with httpx.AsyncClient() as client:
            response = await client.request(
                method,
                target_url,
                params=params,
                headers=headers,
                content=content,
                timeout=20.0  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–æ 60 —Å–µ–∫—É–Ω–¥
            )

            process_time = time.time() - start_time

            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            logger.info(f"–ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {request.method} {request.url.path} -> {target_url} | "
                        f"–°—Ç–∞—Ç—É—Å: {response.status_code}, –í—Ä–µ–º—è: {process_time:.3f}s")

            # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å —Ç–µ–º –∂–µ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥–æ–º –∏ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
            return Response(
                content=response.content,
                status_code=response.status_code,
                headers=dict(response.headers),
                media_type=response.headers.get("content-type")
            )

    except httpx.RequestError as e:
        raise HTTPException(status_code=502, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–∏—Å—É: {str(e)}")