import os
import json
import logging
import asyncio
import aio_pika
from datetime import datetime
from typing import Dict, Any, Optional, Callable

logger = logging.getLogger("api_gateway")

class RabbitMQClient:
    def __init__(self, url: str = "amqp://guest:guest@localhost/"):
        self.url = url
        self.connection = None
        self.channel = None
        self.callback_queue = None
        self.futures: Dict[str, asyncio.Future] = {}
        self.response_consumer_tag = None
        self.queues = {
            "sever_ryba": "sever_ryba_queue",
            "ais": "ais_queue",
            "notifications": "notifications_queue"
        }
        
    async def connect(self) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å RabbitMQ —Å–µ—Ä–≤–µ—Ä–æ–º"""
        try:
            self.connection = await aio_pika.connect_robust(self.url)
            self.channel = await self.connection.channel()
            
            # –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
            for queue_name in self.queues.values():
                await self.channel.declare_queue(queue_name, durable=True)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
            self.callback_queue = await self.channel.declare_queue(
                "", exclusive=True
            )
            
            self.response_consumer_tag = await self.callback_queue.consume(
                self._on_response, no_ack=True
            )
            
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ: {e}")
            raise
    
    async def disconnect(self) -> None:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å RabbitMQ"""
        if self.connection:
            await self.connection.close()
            logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å RabbitMQ –∑–∞–∫—Ä—ã—Ç–æ")
    
    async def _on_response(self, message: aio_pika.IncomingMessage) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤"""
        if message.correlation_id is None:
            logger.warning("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ correlation_id")
            return
            
        future = self.futures.get(message.correlation_id)
        if future:
            try:
                response_data = json.loads(message.body.decode())
                future.set_result(response_data)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
                future.set_exception(e)
            finally:
                self.futures.pop(message.correlation_id, None)
    
    async def send_message(self, service: str, method: str, data: Dict[str, Any], 
                          wait_for_response: bool = True) -> Optional[Dict[str, Any]]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å —Å–µ—Ä–≤–∏—Å–∞"""
        if not self.connection or self.connection.is_closed:
            await self.connect()
        
        queue_name = self.queues.get(service)
        if not queue_name:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å: {service}")
        
        correlation_id = f"{datetime.now().timestamp()}-{os.urandom(4).hex()}"
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_body = {
            "method": method,
            "data": data,
            "timestamp": datetime.now().isoformat()
        }
        
        # –°–æ–∑–¥–∞–Ω–∏–µ future –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        if wait_for_response:
            future = asyncio.Future()
            self.futures[correlation_id] = future
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        await self.channel.default_exchange.publish(
            aio_pika.Message(
                body=json.dumps(message_body).encode(),
                correlation_id=correlation_id,
                reply_to=self.callback_queue.name if wait_for_response else None,
                delivery_mode=aio_pika.DeliveryMode.PERSISTENT,
                content_type="application/json"
            ),
            routing_key=queue_name
        )
        
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {queue_name}: –º–µ—Ç–æ–¥={method}")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        if wait_for_response:
            try:
                # –¢–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
                response = await asyncio.wait_for(future, 10.0)
                logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è {correlation_id}")
                return response
            except asyncio.TimeoutError:
                self.futures.pop(correlation_id, None)
                logger.error(f"‚è±Ô∏è –ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {correlation_id}")
                raise TimeoutError(f"–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç {service} –∏—Å—Ç–µ–∫–ª–æ")
        
        return None
    
    async def subscribe_to_events(self, queue_name: str, callback: Callable) -> str:
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏"""
        if not self.connection or self.connection.is_closed:
            await self.connect()
            
        queue = await self.channel.declare_queue(queue_name, durable=True)
        consumer_tag = await queue.consume(callback)
        logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ {queue_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        return consumer_tag

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
rabbit_client = RabbitMQClient()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
async def init_rabbitmq():
    await rabbit_client.connect()
    logger.info("RabbitMQ –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
async def close_rabbitmq():
    await rabbit_client.disconnect()
    logger.info("RabbitMQ –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")